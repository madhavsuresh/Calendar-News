#
#!/usr/bin/env python
# Copyright 2007 Google Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
from google.appengine.ext import webapp
from google.appengine.ext.webapp import util
from google.appengine.api import users
from google.appengine.ext.webapp import template
import gdata.gauth
import gdata.calendar.client
import os

SETTINGS = {
	'APP_NAME': 'nucalendarfeed',
	'CONSUMER_KEY':'nucalendarfeed.appspot.com',
	'CONSUMER_SECRET': 'wYhmmHnVDHpinMNG3KZwNwee',
	'SCOPES' : ['https://docs.google.com/feeds/']
}

gcal = gdata.calendar.client.CalendarClient(source = SETTINGS['APP_NAME'])

class Fetcher(webapp.RequestHandler):
  def get(self):

    current_user = users.get_current_user()

    scopes = SETTINGS['SCOPES']
    oauth_callback = 'http://%s/step2' % self.request.host
    consumer_key = SETTINGS['CONSUMER_KEY']
    consumer_secret = SETTINGS['CONSUMER_SECRET']
    request_token = gcal.get_oauth_token(scopes, oauth_callback,
                                              consumer_key, consumer_secret)

    request_token_key = 'request_token_%s' % current_user.user_id()
    gdata.gauth.ae_save(request_token,request_token_key)

    approval_page_url = request_token.generate_authorization_url()

    message = """<a href="%s">
Request Token for the Google Documents Scope</a>"""
    self.response.out.write(message % approval_page_url)

class RequestTokenCallback(webapp.RequestHandler):
  
  def get(self):
    current_user = users.get_current_user()
    request_token_key = 'request_token %s' % current_user_id
    request_token = gdata.gauth.ae_load(request_token_key)
    gdata.gauth.authorize_request_token(request_token,self.request.uri)

    gcal.auth_token = gcal.get_access_token(request_token)

    access_token_key = 'access_token_%s' % current_user.user_id()
    gdata.gauth.ae_save(request_token,access_token_key)
    events = gcal.GetAllCalendarsFeed()
    for entry,cal in enumerate(events.entry):
      template = '<div>%s</div>'
      self.response.out.write(template % i)








class GoogleAuth(webapp.RequestHandler):
  def get(self):
    path = os.path.join(os.path.dirname(__file__),'static/googleauth.html')
    self.response.out.write(template.render(path,0))
  

def main():
  application = webapp.WSGIApplication([('/step1',Fetcher),
					('/step2',RequestTokenCallback),
					('/google0966cae5fafeed54.html',GoogleAuth),],
                                        debug=True)
  util.run_wsgi_app(application)


if __name__ == '__main__':
  main()
